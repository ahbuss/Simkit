//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.04.02 at 03:27:54 PST 
//


package simkit.xsd.bindings.assembly;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the simkit.xsd.bindings.assembly package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends simkit.xsd.bindings.assembly.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap();
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static simkit.xsd.bindings.assembly.impl.runtime.GrammarInfo grammarInfo = new simkit.xsd.bindings.assembly.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (simkit.xsd.bindings.assembly.ObjectFactory.class));
    public final static java.lang.Class version = (simkit.xsd.bindings.assembly.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((simkit.xsd.bindings.assembly.MultiParameter.class), "simkit.xsd.bindings.assembly.impl.MultiParameterImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.FactoryParameterType.class), "simkit.xsd.bindings.assembly.impl.FactoryParameterTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.Parameters.class), "simkit.xsd.bindings.assembly.impl.ParametersImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.Output.class), "simkit.xsd.bindings.assembly.impl.OutputImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimkitAssembly.class), "simkit.xsd.bindings.assembly.impl.SimkitAssemblyImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.OutputType.class), "simkit.xsd.bindings.assembly.impl.OutputTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimkitAssemblyType.class), "simkit.xsd.bindings.assembly.impl.SimkitAssemblyTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.TerminalParameter.class), "simkit.xsd.bindings.assembly.impl.TerminalParameterImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.TerminalParameterType.class), "simkit.xsd.bindings.assembly.impl.TerminalParameterTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.AnyType.class), "simkit.xsd.bindings.assembly.impl.AnyTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimEventListenerConnectionType.class), "simkit.xsd.bindings.assembly.impl.SimEventListenerConnectionTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.PropertyChangeListenerConnectionType.class), "simkit.xsd.bindings.assembly.impl.PropertyChangeListenerConnectionTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.PropertyChangeListenerType.class), "simkit.xsd.bindings.assembly.impl.PropertyChangeListenerTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimEntity.class), "simkit.xsd.bindings.assembly.impl.SimEntityImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimEventListenerConnection.class), "simkit.xsd.bindings.assembly.impl.SimEventListenerConnectionImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.PropertyChangeListener.class), "simkit.xsd.bindings.assembly.impl.PropertyChangeListenerImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.FactoryParameter.class), "simkit.xsd.bindings.assembly.impl.FactoryParameterImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.PropertyChangeListenerConnection.class), "simkit.xsd.bindings.assembly.impl.PropertyChangeListenerConnectionImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.MultiParameterType.class), "simkit.xsd.bindings.assembly.impl.MultiParameterTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.assembly.SimEntityType.class), "simkit.xsd.bindings.assembly.impl.SimEntityTypeImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "Parameters"), (simkit.xsd.bindings.assembly.Parameters.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "SimEventListenerConnection"), (simkit.xsd.bindings.assembly.SimEventListenerConnection.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "PropertyChangeListener"), (simkit.xsd.bindings.assembly.PropertyChangeListener.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "TerminalParameter"), (simkit.xsd.bindings.assembly.TerminalParameter.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Output"), (simkit.xsd.bindings.assembly.Output.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "FactoryParameter"), (simkit.xsd.bindings.assembly.FactoryParameter.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "PropertyChangeListenerConnection"), (simkit.xsd.bindings.assembly.PropertyChangeListenerConnection.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "SimkitAssembly"), (simkit.xsd.bindings.assembly.SimkitAssembly.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "SimEntity"), (simkit.xsd.bindings.assembly.SimEntity.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "MultiParameter"), (simkit.xsd.bindings.assembly.MultiParameter.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: simkit.xsd.bindings.assembly
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of MultiParameter
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.MultiParameter createMultiParameter()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.MultiParameterImpl();
    }

    /**
     * Create an instance of FactoryParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.FactoryParameterType createFactoryParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.FactoryParameterTypeImpl();
    }

    /**
     * Create an instance of Parameters
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.Parameters createParameters()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.ParametersImpl();
    }

    /**
     * Create an instance of Output
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.Output createOutput()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.OutputImpl();
    }

    /**
     * Create an instance of SimkitAssembly
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimkitAssembly createSimkitAssembly()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimkitAssemblyImpl();
    }

    /**
     * Create an instance of OutputType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.OutputType createOutputType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.OutputTypeImpl();
    }

    /**
     * Create an instance of SimkitAssemblyType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimkitAssemblyType createSimkitAssemblyType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimkitAssemblyTypeImpl();
    }

    /**
     * Create an instance of TerminalParameter
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.TerminalParameter createTerminalParameter()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.TerminalParameterImpl();
    }

    /**
     * Create an instance of TerminalParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.TerminalParameterType createTerminalParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.TerminalParameterTypeImpl();
    }

    /**
     * Create an instance of AnyType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.AnyType createAnyType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.AnyTypeImpl();
    }

    /**
     * Create an instance of SimEventListenerConnectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimEventListenerConnectionType createSimEventListenerConnectionType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimEventListenerConnectionTypeImpl();
    }

    /**
     * Create an instance of PropertyChangeListenerConnectionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.PropertyChangeListenerConnectionType createPropertyChangeListenerConnectionType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.PropertyChangeListenerConnectionTypeImpl();
    }

    /**
     * Create an instance of PropertyChangeListenerType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.PropertyChangeListenerType createPropertyChangeListenerType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.PropertyChangeListenerTypeImpl();
    }

    /**
     * Create an instance of SimEntity
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimEntity createSimEntity()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimEntityImpl();
    }

    /**
     * Create an instance of SimEventListenerConnection
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimEventListenerConnection createSimEventListenerConnection()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimEventListenerConnectionImpl();
    }

    /**
     * Create an instance of PropertyChangeListener
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.PropertyChangeListener createPropertyChangeListener()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.PropertyChangeListenerImpl();
    }

    /**
     * Create an instance of FactoryParameter
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.FactoryParameter createFactoryParameter()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.FactoryParameterImpl();
    }

    /**
     * Create an instance of PropertyChangeListenerConnection
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.PropertyChangeListenerConnection createPropertyChangeListenerConnection()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.PropertyChangeListenerConnectionImpl();
    }

    /**
     * Create an instance of MultiParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.MultiParameterType createMultiParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.MultiParameterTypeImpl();
    }

    /**
     * Create an instance of SimEntityType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.assembly.SimEntityType createSimEntityType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.assembly.impl.SimEntityTypeImpl();
    }

}
