//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.03.23 at 11:39:48 PST 
//


package simkit.xsd.bindings;


/**
 * This object contains factory methods for each 
 * Java content interface and Java element interface 
 * generated in the simkit.xsd.bindings package. 
 * <p>An ObjectFactory allows you to programatically 
 * construct new instances of the Java representation 
 * for XML content. The Java representation of XML 
 * content can consist of schema derived interfaces 
 * and classes representing the binding of schema 
 * type definitions, element declarations and model 
 * groups.  Factory methods for each of these are 
 * provided in this class.
 * 
 */
public class ObjectFactory
    extends simkit.xsd.bindings.impl.runtime.DefaultJAXBContextImpl
{

    private static java.util.HashMap defaultImplementations = new java.util.HashMap();
    private static java.util.HashMap rootTagMap = new java.util.HashMap();
    public final static simkit.xsd.bindings.impl.runtime.GrammarInfo grammarInfo = new simkit.xsd.bindings.impl.runtime.GrammarInfoImpl(rootTagMap, defaultImplementations, (simkit.xsd.bindings.ObjectFactory.class));
    public final static java.lang.Class version = (simkit.xsd.bindings.impl.JAXBVersion.class);

    static {
        defaultImplementations.put((simkit.xsd.bindings.ParameterType.class), "simkit.xsd.bindings.impl.ParameterTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.EventType.class), "simkit.xsd.bindings.impl.EventTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.AssignmentElement.class), "simkit.xsd.bindings.impl.AssignmentElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.CancelType.class), "simkit.xsd.bindings.impl.CancelTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.StateTransitionType.class), "simkit.xsd.bindings.impl.StateTransitionTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.AnyType.class), "simkit.xsd.bindings.impl.AnyTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.SimkitModuleType.class), "simkit.xsd.bindings.impl.SimkitModuleTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.StateVariableElement.class), "simkit.xsd.bindings.impl.StateVariableElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.StateVariableType.class), "simkit.xsd.bindings.impl.StateVariableTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.CommentElement.class), "simkit.xsd.bindings.impl.CommentElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.ArgumentElement.class), "simkit.xsd.bindings.impl.ArgumentElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.ScheduleType.class), "simkit.xsd.bindings.impl.ScheduleTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.OperationElement.class), "simkit.xsd.bindings.impl.OperationElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.LocalVariableElement.class), "simkit.xsd.bindings.impl.LocalVariableElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.EdgeTypeElement.class), "simkit.xsd.bindings.impl.EdgeTypeElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.TransitionTypeElement.class), "simkit.xsd.bindings.impl.TransitionTypeElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.ScheduleElement.class), "simkit.xsd.bindings.impl.ScheduleElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.ParameterElement.class), "simkit.xsd.bindings.impl.ParameterElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.AssignmentType.class), "simkit.xsd.bindings.impl.AssignmentTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.LocalVariableType.class), "simkit.xsd.bindings.impl.LocalVariableTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.SimkitModuleElement.class), "simkit.xsd.bindings.impl.SimkitModuleElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.OperationType.class), "simkit.xsd.bindings.impl.OperationTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.EdgeParameterElement.class), "simkit.xsd.bindings.impl.EdgeParameterElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.CancelElement.class), "simkit.xsd.bindings.impl.CancelElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.TransitionType.class), "simkit.xsd.bindings.impl.TransitionTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.ArgumentType.class), "simkit.xsd.bindings.impl.ArgumentTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.VariableDeclarationsElement.class), "simkit.xsd.bindings.impl.VariableDeclarationsElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.StateTransitionElement.class), "simkit.xsd.bindings.impl.StateTransitionElementImpl");
        defaultImplementations.put((simkit.xsd.bindings.EdgeParameterType.class), "simkit.xsd.bindings.impl.EdgeParameterTypeImpl");
        defaultImplementations.put((simkit.xsd.bindings.EventElement.class), "simkit.xsd.bindings.impl.EventElementImpl");
        rootTagMap.put(new javax.xml.namespace.QName("", "Cancel"), (simkit.xsd.bindings.CancelElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "TransitionType"), (simkit.xsd.bindings.TransitionTypeElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Comment"), (simkit.xsd.bindings.CommentElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "EdgeParameter"), (simkit.xsd.bindings.EdgeParameterElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Schedule"), (simkit.xsd.bindings.ScheduleElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Assignment"), (simkit.xsd.bindings.AssignmentElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "StateTransition"), (simkit.xsd.bindings.StateTransitionElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "StateVariable"), (simkit.xsd.bindings.StateVariableElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Operation"), (simkit.xsd.bindings.OperationElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "LocalVariable"), (simkit.xsd.bindings.LocalVariableElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Event"), (simkit.xsd.bindings.EventElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "SimkitModule"), (simkit.xsd.bindings.SimkitModuleElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Parameter"), (simkit.xsd.bindings.ParameterElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "Argument"), (simkit.xsd.bindings.ArgumentElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "VariableDeclarations"), (simkit.xsd.bindings.VariableDeclarationsElement.class));
        rootTagMap.put(new javax.xml.namespace.QName("", "EdgeType"), (simkit.xsd.bindings.EdgeTypeElement.class));
    }

    /**
     * Create a new ObjectFactory that can be used to create new instances of schema derived classes for package: simkit.xsd.bindings
     * 
     */
    public ObjectFactory() {
        super(grammarInfo);
    }

    /**
     * Create an instance of the specified Java content interface.
     * 
     * @param javaContentInterface
     *     the Class object of the javacontent interface to instantiate
     * @return
     *     a new instance
     * @throws JAXBException
     *     if an error occurs
     */
    public java.lang.Object newInstance(java.lang.Class javaContentInterface)
        throws javax.xml.bind.JAXBException
    {
        return super.newInstance(javaContentInterface);
    }

    /**
     * Get the specified property. This method can only be
     * used to get provider specific properties.
     * Attempting to get an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param name
     *     the name of the property to retrieve
     * @return
     *     the value of the requested property
     * @throws PropertyException
     *     when there is an error retrieving the given property or value
     */
    public java.lang.Object getProperty(java.lang.String name)
        throws javax.xml.bind.PropertyException
    {
        return super.getProperty(name);
    }

    /**
     * Set the specified property. This method can only be
     * used to set provider specific properties.
     * Attempting to set an undefined property will result
     * in a PropertyException being thrown.
     * 
     * @param value
     *     the value of the property to be set
     * @param name
     *     the name of the property to retrieve
     * @throws PropertyException
     *     when there is an error processing the given property or value
     */
    public void setProperty(java.lang.String name, java.lang.Object value)
        throws javax.xml.bind.PropertyException
    {
        super.setProperty(name, value);
    }

    /**
     * Create an instance of ParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ParameterType createParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ParameterTypeImpl();
    }

    /**
     * Create an instance of EventType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.EventType createEventType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.EventTypeImpl();
    }

    /**
     * Create an instance of AssignmentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.AssignmentElement createAssignmentElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.AssignmentElementImpl();
    }

    /**
     * Create an instance of CancelType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.CancelType createCancelType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.CancelTypeImpl();
    }

    /**
     * Create an instance of StateTransitionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.StateTransitionType createStateTransitionType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.StateTransitionTypeImpl();
    }

    /**
     * Create an instance of AnyType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.AnyType createAnyType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.AnyTypeImpl();
    }

    /**
     * Create an instance of SimkitModuleType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.SimkitModuleType createSimkitModuleType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.SimkitModuleTypeImpl();
    }

    /**
     * Create an instance of StateVariableElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.StateVariableElement createStateVariableElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.StateVariableElementImpl();
    }

    /**
     * Create an instance of StateVariableType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.StateVariableType createStateVariableType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.StateVariableTypeImpl();
    }

    /**
     * Create an instance of CommentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.CommentElement createCommentElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.CommentElementImpl();
    }

    /**
     * Create an instance of CommentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.CommentElement createCommentElement(java.lang.String value)
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.CommentElementImpl(value);
    }

    /**
     * Create an instance of ArgumentElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ArgumentElement createArgumentElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ArgumentElementImpl();
    }

    /**
     * Create an instance of ScheduleType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ScheduleType createScheduleType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ScheduleTypeImpl();
    }

    /**
     * Create an instance of OperationElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.OperationElement createOperationElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.OperationElementImpl();
    }

    /**
     * Create an instance of LocalVariableElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.LocalVariableElement createLocalVariableElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.LocalVariableElementImpl();
    }

    /**
     * Create an instance of EdgeTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.EdgeTypeElement createEdgeTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.EdgeTypeElementImpl();
    }

    /**
     * Create an instance of TransitionTypeElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.TransitionTypeElement createTransitionTypeElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.TransitionTypeElementImpl();
    }

    /**
     * Create an instance of ScheduleElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ScheduleElement createScheduleElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ScheduleElementImpl();
    }

    /**
     * Create an instance of ParameterElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ParameterElement createParameterElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ParameterElementImpl();
    }

    /**
     * Create an instance of AssignmentType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.AssignmentType createAssignmentType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.AssignmentTypeImpl();
    }

    /**
     * Create an instance of LocalVariableType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.LocalVariableType createLocalVariableType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.LocalVariableTypeImpl();
    }

    /**
     * Create an instance of SimkitModuleElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.SimkitModuleElement createSimkitModuleElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.SimkitModuleElementImpl();
    }

    /**
     * Create an instance of OperationType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.OperationType createOperationType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.OperationTypeImpl();
    }

    /**
     * Create an instance of EdgeParameterElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.EdgeParameterElement createEdgeParameterElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.EdgeParameterElementImpl();
    }

    /**
     * Create an instance of CancelElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.CancelElement createCancelElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.CancelElementImpl();
    }

    /**
     * Create an instance of TransitionType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.TransitionType createTransitionType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.TransitionTypeImpl();
    }

    /**
     * Create an instance of ArgumentType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.ArgumentType createArgumentType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.ArgumentTypeImpl();
    }

    /**
     * Create an instance of VariableDeclarationsElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.VariableDeclarationsElement createVariableDeclarationsElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.VariableDeclarationsElementImpl();
    }

    /**
     * Create an instance of StateTransitionElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.StateTransitionElement createStateTransitionElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.StateTransitionElementImpl();
    }

    /**
     * Create an instance of EdgeParameterType
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.EdgeParameterType createEdgeParameterType()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.EdgeParameterTypeImpl();
    }

    /**
     * Create an instance of EventElement
     * 
     * @throws JAXBException
     *     if an error occurs
     */
    public simkit.xsd.bindings.EventElement createEventElement()
        throws javax.xml.bind.JAXBException
    {
        return new simkit.xsd.bindings.impl.EventElementImpl();
    }

}
