//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0.2-b15-fcs 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2004.03.23 at 11:39:48 PST 
//


package simkit.xsd.bindings.impl;

public class EventTypeImpl implements simkit.xsd.bindings.EventType, com.sun.xml.bind.JAXBObject, simkit.xsd.bindings.impl.runtime.UnmarshallableObject, simkit.xsd.bindings.impl.runtime.XMLSerializable, com.sun.xml.bind.marshaller.IdentifiableObject, simkit.xsd.bindings.impl.runtime.ValidatableObject
{

    protected com.sun.xml.bind.util.ListImpl _Comment = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _StateTransition = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _LocalVariable = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected java.lang.String _Name;
    protected com.sun.xml.bind.util.ListImpl _EdgeType = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected com.sun.xml.bind.util.ListImpl _Argument = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    public final static java.lang.Class version = (simkit.xsd.bindings.impl.JAXBVersion.class);
    private static com.sun.msv.grammar.Grammar schemaFragment;

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return (simkit.xsd.bindings.EventType.class);
    }

    public java.util.List getComment() {
        return _Comment;
    }

    public java.util.List getStateTransition() {
        return _StateTransition;
    }

    public java.util.List getLocalVariable() {
        return _LocalVariable;
    }

    public java.lang.String getName() {
        return _Name;
    }

    public void setName(java.lang.String value) {
        _Name = value;
    }

    public java.util.List getEdgeType() {
        return _EdgeType;
    }

    public java.util.List getArgument() {
        return _Argument;
    }

    public simkit.xsd.bindings.impl.runtime.UnmarshallingEventHandler createUnmarshaller(simkit.xsd.bindings.impl.runtime.UnmarshallingContext context) {
        return new simkit.xsd.bindings.impl.EventTypeImpl.Unmarshaller(context);
    }

    public void serializeBody(simkit.xsd.bindings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Comment.size();
        int idx2 = 0;
        final int len2 = _StateTransition.size();
        int idx3 = 0;
        final int len3 = _LocalVariable.size();
        int idx5 = 0;
        final int len5 = _EdgeType.size();
        int idx6 = 0;
        final int len6 = _Argument.size();
        while (idx1 != len1) {
            context.startElement("", "Comment");
            int idx_0 = idx1;
            try {
                idx_0 += 1;
            } catch (java.lang.Exception e) {
                simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endNamespaceDecls();
            int idx_1 = idx1;
            try {
                idx_1 += 1;
            } catch (java.lang.Exception e) {
                simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttributes();
            try {
                context.text(((java.lang.String) _Comment.get(idx1 ++)), "Comment");
            } catch (java.lang.Exception e) {
                simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
            context.endElement();
        }
        while (idx6 != len6) {
            if (_Argument.get(idx6) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Argument.get(idx6 ++)), "Argument");
            } else {
                context.startElement("", "Argument");
                int idx_2 = idx6;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Argument.get(idx_2 ++)), "Argument");
                context.endNamespaceDecls();
                int idx_3 = idx6;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Argument.get(idx_3 ++)), "Argument");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _Argument.get(idx6 ++)), "Argument");
                context.endElement();
            }
        }
        while (idx3 != len3) {
            if (_LocalVariable.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx3 ++)), "LocalVariable");
            } else {
                context.startElement("", "LocalVariable");
                int idx_4 = idx3;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx_4 ++)), "LocalVariable");
                context.endNamespaceDecls();
                int idx_5 = idx3;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx_5 ++)), "LocalVariable");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx3 ++)), "LocalVariable");
                context.endElement();
            }
        }
        while (idx2 != len2) {
            if (_StateTransition.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx2 ++)), "StateTransition");
            } else {
                context.startElement("", "StateTransition");
                int idx_6 = idx2;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx_6 ++)), "StateTransition");
                context.endNamespaceDecls();
                int idx_7 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx_7 ++)), "StateTransition");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx2 ++)), "StateTransition");
                context.endElement();
            }
        }
        while (idx5 != len5) {
            if (_EdgeType.get(idx5) instanceof javax.xml.bind.Element) {
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx5 ++)), "EdgeType");
            } else {
                context.startElement("", "EdgeType");
                int idx_8 = idx5;
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx_8 ++)), "EdgeType");
                context.endNamespaceDecls();
                int idx_9 = idx5;
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx_9 ++)), "EdgeType");
                context.endAttributes();
                context.childAsBody(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx5 ++)), "EdgeType");
                context.endElement();
            }
        }
    }

    public void serializeAttributes(simkit.xsd.bindings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Comment.size();
        int idx2 = 0;
        final int len2 = _StateTransition.size();
        int idx3 = 0;
        final int len3 = _LocalVariable.size();
        int idx5 = 0;
        final int len5 = _EdgeType.size();
        int idx6 = 0;
        final int len6 = _Argument.size();
        context.startAttribute("", "name");
        try {
            context.text(context.onID(this, ((java.lang.String) _Name)), "Name");
        } catch (java.lang.Exception e) {
            simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
        }
        context.endAttribute();
        while (idx1 != len1) {
            try {
                idx1 += 1;
            } catch (java.lang.Exception e) {
                simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
        }
        while (idx6 != len6) {
            if (_Argument.get(idx6) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _Argument.get(idx6 ++)), "Argument");
            } else {
                idx6 += 1;
            }
        }
        while (idx3 != len3) {
            if (_LocalVariable.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx3 ++)), "LocalVariable");
            } else {
                idx3 += 1;
            }
        }
        while (idx2 != len2) {
            if (_StateTransition.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx2 ++)), "StateTransition");
            } else {
                idx2 += 1;
            }
        }
        while (idx5 != len5) {
            if (_EdgeType.get(idx5) instanceof javax.xml.bind.Element) {
                context.childAsAttributes(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx5 ++)), "EdgeType");
            } else {
                idx5 += 1;
            }
        }
    }

    public void serializeURIs(simkit.xsd.bindings.impl.runtime.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx1 = 0;
        final int len1 = _Comment.size();
        int idx2 = 0;
        final int len2 = _StateTransition.size();
        int idx3 = 0;
        final int len3 = _LocalVariable.size();
        int idx5 = 0;
        final int len5 = _EdgeType.size();
        int idx6 = 0;
        final int len6 = _Argument.size();
        while (idx1 != len1) {
            try {
                idx1 += 1;
            } catch (java.lang.Exception e) {
                simkit.xsd.bindings.impl.runtime.Util.handlePrintConversionException(this, e, context);
            }
        }
        while (idx6 != len6) {
            if (_Argument.get(idx6) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _Argument.get(idx6 ++)), "Argument");
            } else {
                idx6 += 1;
            }
        }
        while (idx3 != len3) {
            if (_LocalVariable.get(idx3) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _LocalVariable.get(idx3 ++)), "LocalVariable");
            } else {
                idx3 += 1;
            }
        }
        while (idx2 != len2) {
            if (_StateTransition.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _StateTransition.get(idx2 ++)), "StateTransition");
            } else {
                idx2 += 1;
            }
        }
        while (idx5 != len5) {
            if (_EdgeType.get(idx5) instanceof javax.xml.bind.Element) {
                context.childAsURIs(((com.sun.xml.bind.JAXBObject) _EdgeType.get(idx5 ++)), "EdgeType");
            } else {
                idx5 += 1;
            }
        }
    }

    public java.lang.String ____jaxb____getId() {
        return ((java.lang.String) _Name);
    }

    public java.lang.Class getPrimaryInterface() {
        return (simkit.xsd.bindings.EventType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        if (schemaFragment == null) {
            schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize((
 "\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.su"
+"n.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/gra"
+"mmar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expressi"
+"on\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava"
+"/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0015\u00ddtoppsq\u0000~\u0000\u0000\u0013\u00f0\u00ac\u0013ppsq\u0000~\u0000\u0000\u0010"
+"\u00ed\u00f3\u00c4ppsq\u0000~\u0000\u0000\u000b\u00d8\u009a<ppsq\u0000~\u0000\u0000\u00075\u00c8\u001appsr\u0000\u001dcom.sun.msv.grammar.ChoiceE"
+"xp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0002\u0011ySppsr\u0000 com.sun.msv.grammar.OneOrMoreEx"
+"p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003ex"
+"pq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0002\u0011yHsr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000p"
+"sr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnam"
+"eClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.gram"
+"mar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcon"
+"tentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0002\u0011yEq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u0000\u0002\u0011y:ppsr\u0000\u001bcom.sun.msv.g"
+"rammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datat"
+"ype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000"
+"~\u0000\u0003\u0000\u00ca\u00f6\u00d1q\u0000~\u0000\u0010psr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001"
+"\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomi"
+"cType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000"
+"\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002"
+"\u0000\u0003L\u0000\fnamespaceUrit\u0000\u0012Ljava/lang/String;L\u0000\btypeNameq\u0000~\u0000\u001eL\u0000\nwhi"
+"teSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000"
+" http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u00005com.sun.msv.da"
+"tatype.xsd.WhiteSpaceProcessor$Preserve\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000,com.su"
+"n.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com."
+"sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000"
+"\u0003\u0000\u0000\u0000\nq\u0000~\u0000\u0010psr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tloca"
+"lNameq\u0000~\u0000\u001eL\u0000\fnamespaceURIq\u0000~\u0000\u001expq\u0000~\u0000\"q\u0000~\u0000!sq\u0000~\u0000\n\u0001F\u0082dppsr\u0000 co"
+"m.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameC"
+"lassq\u0000~\u0000\u0012xq\u0000~\u0000\u0003\u0001F\u0082Yq\u0000~\u0000\u0010psq\u0000~\u0000\u0016\u0000\u0081\u00b2\u000bppsr\u0000\"com.sun.msv.datatyp"
+"e.xsd.QnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001bq\u0000~\u0000!t\u0000\u0005QNamesr\u00005com.sun.msv"
+".datatype.xsd.WhiteSpaceProcessor$Collapse\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000$q"
+"\u0000~\u0000\'sq\u0000~\u0000(q\u0000~\u00000q\u0000~\u0000!sr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\u001eL\u0000\fnamespaceURIq\u0000~\u0000\u001exr\u0000\u001dcom.sun.m"
+"sv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpt\u0000\u0004typet\u0000)http://www.w3.org"
+"/2001/XMLSchema-instancesr\u00000com.sun.msv.grammar.Expression$E"
+"psilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tsq\u0000~\u0000\u000f\u0001psq\u0000~\u00004t\u0000\u0007Commen"
+"tt\u0000\u0000q\u0000~\u0000:sq\u0000~\u0000\n\u0005$N\u00c2ppsq\u0000~\u0000\f\u0005$N\u00b7q\u0000~\u0000\u0010psq\u0000~\u0000\n\u0005$N\u00b4q\u0000~\u0000\u0010psq\u0000~\u0000\u0011\u0001"
+"\u0081\\\u001dq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010psr\u00002co"
+"m.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000x"
+"q\u0000~\u0000\u0003\u0000\u0000\u0000\bq\u0000~\u0000;q\u0000~\u0000Gsr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000"
+"\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u00005q\u0000~\u0000:sq\u0000~\u00004t\u0000#simkit.xsd.bindings.ArgumentElemen"
+"tt\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000\u0011\u0003\u00a2\u00f2\u0095q\u0000~"
+"\u0000\u0010p\u0000sq\u0000~\u0000\u0000\u0003\u00a2\u00f2\u008appsq\u0000~\u0000\u0011\u0001\u0081\\\u001dpp\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000"
+"~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000 simkit.xsd.bindings.Arg"
+"umentTypeq\u0000~\u0000Lsq\u0000~\u0000\n\u0002!\u0096hppsq\u0000~\u0000+\u0002!\u0096]q\u0000~\u0000\u0010pq\u0000~\u0000-sq\u0000~\u00004q\u0000~\u00007q\u0000"
+"~\u00008q\u0000~\u0000:sq\u0000~\u00004t\u0000\bArgumentq\u0000~\u0000>q\u0000~\u0000:sq\u0000~\u0000\n\u0004\u00a2\u00d2\u001dppsq\u0000~\u0000\f\u0004\u00a2\u00d2\u0012q\u0000~"
+"\u0000\u0010psq\u0000~\u0000\n\u0004\u00a2\u00d2\u000fq\u0000~\u0000\u0010psq\u0000~\u0000\u0011\u0001\u0081\\\u001dq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000"
+"~\u0000\u0010psq\u0000~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000(simkit.xsd.bindi"
+"ngs.LocalVariableElementq\u0000~\u0000Lsq\u0000~\u0000\u0011\u0003!u\u00f0q\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u0000\u0003!u\u00e5ppsq"
+"\u0000~\u0000\u0011\u0001\u0081\\\u001dpp\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000G"
+"q\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000%simkit.xsd.bindings.LocalVariableTypeq\u0000~\u0000"
+"Lsq\u0000~\u0000\n\u0001\u00a0\u0019\u00c3ppsq\u0000~\u0000+\u0001\u00a0\u0019\u00b8q\u0000~\u0000\u0010pq\u0000~\u0000-sq\u0000~\u00004q\u0000~\u00007q\u0000~\u00008q\u0000~\u0000:sq\u0000~\u0000"
+"4t\u0000\rLocalVariableq\u0000~\u0000>q\u0000~\u0000:sq\u0000~\u0000\n\u0005\u0015Y\u0083ppsq\u0000~\u0000\f\u0005\u0015Yxq\u0000~\u0000\u0010psq\u0000~\u0000"
+"\n\u0005\u0015Yuq\u0000~\u0000\u0010psq\u0000~\u0000\u0011\u0001\u0081\\\u001dq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000~"
+"\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000*simkit.xsd.bindings.Stat"
+"eTransitionElementq\u0000~\u0000Lsq\u0000~\u0000\u0011\u0003\u0093\u00fdVq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\u0000\u0003\u0093\u00fdKppsq\u0000~\u0000\u0011\u0001\u0081"
+"\\\u001dpp\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq"
+"\u0000~\u0000:sq\u0000~\u00004t\u0000\'simkit.xsd.bindings.StateTransitionTypeq\u0000~\u0000Lsq\u0000"
+"~\u0000\n\u0002\u0012\u00a1)ppsq\u0000~\u0000+\u0002\u0012\u00a1\u001eq\u0000~\u0000\u0010pq\u0000~\u0000-sq\u0000~\u00004q\u0000~\u00007q\u0000~\u00008q\u0000~\u0000:sq\u0000~\u00004t\u0000\u000f"
+"StateTransitionq\u0000~\u0000>q\u0000~\u0000:sq\u0000~\u0000\n\u0003\u0002\u00b8Jppsq\u0000~\u0000\f\u0003\u0002\u00b8?q\u0000~\u0000\u0010psq\u0000~\u0000\n\u0003"
+"\u0002\u00b8<q\u0000~\u0000\u0010psq\u0000~\u0000\u0011\u0001\u0081\\\u001dq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000~\u0000+"
+"\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000!simkit.xsd.bindings.Cancel"
+"Elementq\u0000~\u0000Lsq\u0000~\u0000\u0011\u0001\u0081\\\u001dq\u0000~\u0000\u0010p\u0000sq\u0000~\u0000\n\u0001\u0081\\\u0012ppsq\u0000~\u0000\f\u0001\u0081\\\u0007q\u0000~\u0000\u0010psq\u0000"
+"~\u0000+\u0001\u0081\\\u0004q\u0000~\u0000\u0010pq\u0000~\u0000Gq\u0000~\u0000Iq\u0000~\u0000:sq\u0000~\u00004t\u0000#simkit.xsd.bindings.Sch"
+"eduleElementq\u0000~\u0000Lq\u0000~\u0000:sq\u0000~\u0000+\u0001\u00ec\u00c8Wppsq\u0000~\u0000\u0016\u0001\u001e\u00b1\u00a9ppsr\u0000\u001fcom.sun.ms"
+"v.datatype.xsd.IDType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000#com.sun.msv.datatype.xsd"
+".NcnameType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\"com.sun.msv.datatype.xsd.TokenType"
+"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u001aq\u0000~\u0000!t\u0000\u0002IDq\u0000~\u00002\u0000q\u0000~\u0000\'sq\u0000~\u0000(q\u0000~\u0000\u009bq\u0000~\u0000!sq\u0000~\u00004"
+"t\u0000\u0004nameq\u0000~\u0000>sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000"
+"\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHas"
+"h;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed"
+"\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000\u00a0[\u0000\u0005tablet\u0000![Lcom/sun/m"
+"sv/grammar/Expression;xp\u0000\u0000\u0000+\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.E"
+"xpression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppq\u0000~\u0000*pq\u0000~\u0000?pq\u0000~\u0000\u0005ppppq\u0000~\u0000Nppp"
+"ppppppppppppppppppq\u0000~\u0000\u0015ppppppq\u0000~\u0000Upppppq\u0000~\u0000\u0006q\u0000~\u0000\u000eppppppppppq"
+"\u0000~\u0000\u000bppppppppq\u0000~\u0000\\pq\u0000~\u0000\tq\u0000~\u0000[ppppppppppq\u0000~\u0000Zppppppq\u0000~\u0000dppppq\u0000"
+"~\u0000\u0007ppppppppppppq\u0000~\u0000rppq\u0000~\u0000qpppppppq\u0000~\u0000kppq\u0000~\u0000pppq\u0000~\u0000\u0088ppq\u0000~\u0000\u0087"
+"q\u0000~\u0000zpppppq\u0000~\u0000Dq\u0000~\u0000Qq\u0000~\u0000_q\u0000~\u0000gq\u0000~\u0000uq\u0000~\u0000}q\u0000~\u0000\u008bq\u0000~\u0000\u0091q\u0000~\u0000\u0086ppq\u0000~"
+"\u0000Cq\u0000~\u0000Pq\u0000~\u0000^q\u0000~\u0000fq\u0000~\u0000tq\u0000~\u0000|q\u0000~\u0000\u008aq\u0000~\u0000\u0090ppppq\u0000~\u0000\u0081q\u0000~\u0000\bppppppppp"
+"ppppppppppppppq\u0000~\u0000Appq\u0000~\u0000@pppp"));
        }
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends simkit.xsd.bindings.impl.runtime.AbstractUnmarshallingEventHandlerImpl
    {


        public Unmarshaller(simkit.xsd.bindings.impl.runtime.UnmarshallingContext context) {
            super(context, "-------------------");
        }

        protected Unmarshaller(simkit.xsd.bindings.impl.runtime.UnmarshallingContext context, int startState) {
            this(context);
            state = startState;
        }

        public java.lang.Object owner() {
            return simkit.xsd.bindings.impl.EventTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname, org.xml.sax.Attributes __atts)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  6 :
                        if (("Comment" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        if (("Argument" == ___local)&&("" == ___uri)) {
                            _Argument.add(((simkit.xsd.bindings.impl.ArgumentElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.ArgumentElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Argument" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        state = 9;
                        continue outer;
                    case  12 :
                        if (("LocalVariable" == ___local)&&("" == ___uri)) {
                            _LocalVariable.add(((simkit.xsd.bindings.impl.LocalVariableElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.LocalVariableElementImpl.class), 12, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LocalVariable" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        if (("StateTransition" == ___local)&&("" == ___uri)) {
                            _StateTransition.add(((simkit.xsd.bindings.impl.StateTransitionElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.StateTransitionElementImpl.class), 15, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("StateTransition" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 13;
                            return ;
                        }
                        state = 15;
                        continue outer;
                    case  3 :
                        if (("Comment" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 4;
                            return ;
                        }
                        state = 6;
                        continue outer;
                    case  16 :
                        if (("Cancel" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.CancelElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.CancelElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Schedule" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.ScheduleElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.ScheduleElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("EdgeType" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.EdgeTypeElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.EdgeTypeElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("EdgeType" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 17;
                            return ;
                        }
                        revertToParentFromEnterElement(___uri, ___local, ___qname, __atts);
                        return ;
                    case  13 :
                        attIdx = context.getAttribute("", "state");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  17 :
                        if (true) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, ___uri, ___local, ___qname, __atts)));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().enterElement(___uri, ___local, ___qname, __atts);
                            return ;
                        }
                        break;
                    case  15 :
                        if (("StateTransition" == ___local)&&("" == ___uri)) {
                            _StateTransition.add(((simkit.xsd.bindings.impl.StateTransitionElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.StateTransitionElementImpl.class), 15, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("StateTransition" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 13;
                            return ;
                        }
                        if (("Cancel" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.CancelElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.CancelElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Schedule" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.ScheduleElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.ScheduleElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("EdgeType" == ___local)&&("" == ___uri)) {
                            _EdgeType.add(((simkit.xsd.bindings.impl.EdgeTypeElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.EdgeTypeElementImpl.class), 16, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("EdgeType" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, true);
                            state = 17;
                            return ;
                        }
                        state = 16;
                        continue outer;
                    case  9 :
                        if (("Argument" == ___local)&&("" == ___uri)) {
                            _Argument.add(((simkit.xsd.bindings.impl.ArgumentElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.ArgumentElementImpl.class), 9, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("Argument" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 7;
                            return ;
                        }
                        if (("LocalVariable" == ___local)&&("" == ___uri)) {
                            _LocalVariable.add(((simkit.xsd.bindings.impl.LocalVariableElementImpl) spawnChildFromEnterElement((simkit.xsd.bindings.impl.LocalVariableElementImpl.class), 12, ___uri, ___local, ___qname, __atts)));
                            return ;
                        }
                        if (("LocalVariable" == ___local)&&("" == ___uri)) {
                            context.pushAttributes(__atts, false);
                            state = 10;
                            return ;
                        }
                        state = 12;
                        continue outer;
                }
                super.enterElement(___uri, ___local, ___qname, __atts);
                break;
            }
        }

        private void eatText1(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Name = context.addToIdTable(com.sun.xml.bind.WhiteSpaceProcessor.collapse(value));
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  8 :
                        if (("Argument" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 9;
                            return ;
                        }
                        break;
                    case  0 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  18 :
                        if (("EdgeType" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 16;
                            return ;
                        }
                        break;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  14 :
                        if (("StateTransition" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 15;
                            return ;
                        }
                        break;
                    case  5 :
                        if (("Comment" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 6;
                            return ;
                        }
                        break;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  11 :
                        if (("LocalVariable" == ___local)&&("" == ___uri)) {
                            context.popAttributes();
                            state = 12;
                            return ;
                        }
                        break;
                    case  16 :
                        revertToParentFromLeaveElement(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        attIdx = context.getAttribute("", "state");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  17 :
                        _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromLeaveElement((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, ___uri, ___local, ___qname)));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveElement(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  15 :
                        state = 16;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveElement(___uri, ___local, ___qname);
                break;
            }
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 1;
                            return ;
                        }
                        break;
                    case  7 :
                        if (("type" == ___local)&&("" == ___uri)) {
                            _Argument.add(((simkit.xsd.bindings.impl.ArgumentTypeImpl) spawnChildFromEnterAttribute((simkit.xsd.bindings.impl.ArgumentTypeImpl.class), 8, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  16 :
                        revertToParentFromEnterAttribute(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        if (("state" == ___local)&&("" == ___uri)) {
                            _StateTransition.add(((simkit.xsd.bindings.impl.StateTransitionTypeImpl) spawnChildFromEnterAttribute((simkit.xsd.bindings.impl.StateTransitionTypeImpl.class), 14, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  17 :
                        _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromEnterAttribute((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, ___uri, ___local, ___qname)));
                        return ;
                    case  10 :
                        if (("value" == ___local)&&("" == ___uri)) {
                            _LocalVariable.add(((simkit.xsd.bindings.impl.LocalVariableTypeImpl) spawnChildFromEnterAttribute((simkit.xsd.bindings.impl.LocalVariableTypeImpl.class), 11, ___uri, ___local, ___qname)));
                            return ;
                        }
                        break;
                    case  15 :
                        state = 16;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.enterAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local, java.lang.String ___qname)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                switch (state) {
                    case  0 :
                        attIdx = context.getAttribute("", "name");
                        if (attIdx >= 0) {
                            final java.lang.String v = context.eatAttribute(attIdx);
                            eatText1(v);
                            state = 3;
                            continue outer;
                        }
                        break;
                    case  2 :
                        if (("name" == ___local)&&("" == ___uri)) {
                            state = 3;
                            return ;
                        }
                        break;
                    case  7 :
                        attIdx = context.getAttribute("", "type");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  6 :
                        state = 9;
                        continue outer;
                    case  12 :
                        state = 15;
                        continue outer;
                    case  3 :
                        state = 6;
                        continue outer;
                    case  16 :
                        revertToParentFromLeaveAttribute(___uri, ___local, ___qname);
                        return ;
                    case  13 :
                        attIdx = context.getAttribute("", "state");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  17 :
                        _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromLeaveAttribute((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, ___uri, ___local, ___qname)));
                        return ;
                    case  10 :
                        attIdx = context.getAttribute("", "value");
                        if (attIdx >= 0) {
                            context.consumeAttribute(attIdx);
                            context.getCurrentHandler().leaveAttribute(___uri, ___local, ___qname);
                            return ;
                        }
                        break;
                    case  15 :
                        state = 16;
                        continue outer;
                    case  9 :
                        state = 12;
                        continue outer;
                }
                super.leaveAttribute(___uri, ___local, ___qname);
                break;
            }
        }

        public void handleText(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            int attIdx;
            outer:
            while (true) {
                try {
                    switch (state) {
                        case  0 :
                            attIdx = context.getAttribute("", "name");
                            if (attIdx >= 0) {
                                final java.lang.String v = context.eatAttribute(attIdx);
                                eatText1(v);
                                state = 3;
                                continue outer;
                            }
                            break;
                        case  7 :
                            attIdx = context.getAttribute("", "type");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  1 :
                            eatText1(value);
                            state = 2;
                            return ;
                        case  4 :
                            eatText2(value);
                            state = 5;
                            return ;
                        case  6 :
                            state = 9;
                            continue outer;
                        case  12 :
                            state = 15;
                            continue outer;
                        case  3 :
                            state = 6;
                            continue outer;
                        case  16 :
                            revertToParentFromText(value);
                            return ;
                        case  13 :
                            attIdx = context.getAttribute("", "state");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  17 :
                            _EdgeType.add(((simkit.xsd.bindings.impl.AnyTypeImpl) spawnChildFromText((simkit.xsd.bindings.impl.AnyTypeImpl.class), 18, value)));
                            return ;
                        case  10 :
                            attIdx = context.getAttribute("", "value");
                            if (attIdx >= 0) {
                                context.consumeAttribute(attIdx);
                                context.getCurrentHandler().text(value);
                                return ;
                            }
                            break;
                        case  15 :
                            state = 16;
                            continue outer;
                        case  9 :
                            state = 12;
                            continue outer;
                    }
                } catch (java.lang.RuntimeException e) {
                    handleUnexpectedTextException(value, e);
                }
                break;
            }
        }

        private void eatText2(final java.lang.String value)
            throws org.xml.sax.SAXException
        {
            try {
                _Comment.add(value);
            } catch (java.lang.Exception e) {
                handleParseConversionException(e);
            }
        }

    }

}
