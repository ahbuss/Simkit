/*
 * ArrivalProcess2.java
 *
 * Created on April 25, 2002, 1:36 PM
 */
package simkit.examples;

import simkit.BasicSimEntity;
import simkit.SimEvent;
import simkit.random.RandomVariate;

/**
 * <p>An implementation of an Arrival Process. Generates arrival events with an
 * interarrival time determined by the RandomVariate. After instantiating with
 * the desired interarrival time RandomVariate, register the entity that will
 * process the arrivals as a SimEventListener.
 * <p>This version overrides BasicSimEntity and does not use reflection to
 * process events.
 *
 * @author Arnold Buss
 */
public class ArrivalProcess2 extends BasicSimEntity {

    /**
     * The number of arrivals so far.
     */
    protected int numberArrivals;

    /**
     * The RandomVariate that generates the interarrivalTimes.
     */
    private RandomVariate interarrivalTimeGenerator;

    public ArrivalProcess2() {
    }

    /**
     * Creates a new ArrivalProcess2 using the given RandomVariate to generate
     * the interarrival times.
     * @param interarrivalTimeGenerator Generates time between Arrival events
     */
    public ArrivalProcess2(RandomVariate interarrivalTimeGenerator) {
        this();
        setInterarrivalTimeGenerator(interarrivalTimeGenerator);
    }

    /**
     * @return the RandomVariate used for generating the interarrival times.
     */
    public RandomVariate getInterarrivalTimeGenerator() {
        return this.interarrivalTimeGenerator;
    }

    /**
     * 
     * @param interarrivalTimeGenerator the RandomVariate used for generating the interarrival times.
     */
    public void setInterarrivalTimeGenerator(RandomVariate interarrivalTimeGenerator) {
        this.interarrivalTimeGenerator = interarrivalTimeGenerator;
    }

    /**
     * @return the number of arrivals generated by this ArrivalProcess2.
     */
    public int getNumberArrivals() {
        return numberArrivals;
    }

    /**
     * Resets to the original state.
     */
    @Override
    public void reset() {
        super.reset();
        numberArrivals = 0;
    }

    /**
     * Schedules the Arrival event based on the time generated by the
     * RandomVariate. Executed automatically when the simulation starts.
     */
    public void doRun() {
        firePropertyChange("numberArrivals", numberArrivals);
        waitDelay("Arrival", interarrivalTimeGenerator.generate());
    }

    /**
     * Notifies registered listeners of the arrival, fires a property change for
     * the number of arrivals, and schedules the next arrival.
     */
    public void doArrival() {
        property.firePropertyChange("numberArrivals", numberArrivals, ++numberArrivals);
        waitDelay("Arrival", interarrivalTimeGenerator.generate());
    }

    /**
     * Does nothing.
     * @param event Given SimEvent
     */
    @Override
    public void processSimEvent(SimEvent event) {
    }

    /**
     * Handles either a Run or an Arrival event.
     * @param event Given SimEvent
     */
    @Override
    public void handleSimEvent(SimEvent event) {
        if (event.getEventName().equals("Run")) {
            doRun();
        } else if (event.getEventName().equals("Arrival")) {
            doArrival();
        }
    }
}
