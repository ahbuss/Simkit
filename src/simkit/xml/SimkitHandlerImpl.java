package simkit.xml;
/*
 * File:           SimkitHandlerImpl.java
 * Date:           February 27, 2004  5:28 PM
 *
 * @author  Rick Goldberg
 * @version somewhat generated by NetBeans XML module
 */
import org.xml.sax.*;

public class SimkitHandlerImpl implements SimkitHandler {
    
    public static final boolean DEBUG = false;
    public static final boolean stdoutPut = true;
    
    /**
     * the dotJava String will build up a .java source file
     * and be available to consumers such as beanshell or javac
     * and as well be passed via the SimkitHandler interface
     * for display in a text pane.
     */
    
    public String dotJava = new String("public class ");
    private String beanBlock = new String("/* begin bean accessor methods */" + '\n');
    private String varDecls = new String("/* begin variable declarations */" + '\n');
    private String eventBlock = new String("/* begin event do methods */" + '\n');
    private String constructor = new String("public ");
    private String constructorBlock = new String("/* set parameters from constructor */");
    private String resetBlock = new String("public void reset() {" + '\n');

    boolean begunEvents = false;
    boolean multiParam = false;
    boolean inRun = false;
    
    // utility method to capitalize and create a proper camel case bean
    
    private String capitalize( String s ) {
        return s.substring(0,1).toUpperCase() + s.substring(1);
    }

    public void start_Cancel(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Cancel: " + meta);
    }
    
    public void end_Cancel() throws SAXException {
        if (DEBUG) System.err.println("end_Cancel()");
    }
    
    public void handle_Comment(final java.lang.String data, final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_Comment: " + data);
    }
    
    public void start_Schedule(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Schedule: " + meta);
        
        // tbd: condition handler

        // typically:
        // waitDelay("Arrival", interarrivalTime.generate());
        eventBlock += "    "
            + "waitDelay(" + '"' + meta.getValue("event") + '"' + ", " + meta.getValue("delay")
            + ");" + '\n';

    }
    
    public void end_Schedule() throws SAXException {
        if (DEBUG) System.err.println("end_Schedule()");
        eventBlock += '\n' + "}";
    }
    
    public void start_State(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_State: " + meta);
        varDecls += "protected " + meta.getValue("type") + " " + meta.getValue("name") + ";" + '\n';


        beanBlock += '\n' + "public " + meta.getValue("type") + " get" + capitalize(meta.getValue("name"))
            + "() {" + '\n'
            + "    " + "return this." + meta.getValue("name") + "; "
            + '\n' + "}" + '\n';

    }
    
    public void end_State() throws SAXException {
        if (DEBUG) System.err.println("end_State()");
    }
    
    public void handle_StateTransition(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("handle_StateTransition: " + meta);        
        
        // process event using Simkit API ...
        // typically
        // firepropertyChange("numberArrivals", numberArrivals, ++numberArrivals);

        // what is the rule on when you would use getNumberArrivals() vs. the var?
        eventBlock += "    "
            + "firePropertyChange(" + '"' + meta.getValue("state") + '"'
            + ", " + "get" + capitalize(meta.getValue("state")) + "(),"
            + " " + "(" + meta.getValue("state") + " = " 
            + meta.getValue("transition") + ") );"
            + '\n' ;

        // a run event also does some munging with the reset() method
        if ( inRun ) {
            resetBlock = '\n' + resetBlock + "    "
            + meta.getValue("state") + " = " + meta.getValue("transition")
            + ";" + '\n';
        }

    }
    
    public void start_Event(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Event: " + meta);
        
        // tbd: either we have a Run tag or we test each event if it is a Run
        // because Run also implies special handling of reset(), including
        // property changes that have higher priority than a 0 delay schedule
        
        eventBlock += '\n' + "public void do" + capitalize(meta.getValue("name"))
            + "() {" + '\n';
        
        if ( meta.getValue("name").equals("Run") ) {
            inRun = true;
            resetBlock += "    " + "super.reset();" + '\n';
        }
    }
    
    public void end_Event() throws SAXException {
        if (DEBUG) System.err.println("end_Event()");
        eventBlock += '\n';

        if ( inRun ) {
            resetBlock += "}" + '\n' + '\n';
            inRun = false;
        }
    }    
    
    public void start_SimkitModule(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_SimkitModule: " + meta);        
        
        dotJava += meta.getValue("name") + " extends SimEntityBase {" + '\n';
        constructor += meta.getValue("name") + "(";
        
    }
    
    public void end_SimkitModule() throws SAXException {
        if (DEBUG) System.err.println("end_SimkitModule()");
        
        constructor += " ) {" + '\n';
        constructorBlock += "}";
        dotJava += varDecls + constructor + constructorBlock + resetBlock + eventBlock + beanBlock + '\n' + "}";

    }
    
    public void start_Parameter(final Attributes meta) throws SAXException {
        if (DEBUG) System.err.println("start_Parameter: " + meta);
        
        varDecls += "private " + meta.getValue("type") + " " + meta.getValue("name") + ";" + '\n';
        
        // create the following method
        // public void setFoo( Bar value ) {
        //      this.foo = value;
        //note: = looks like - in nb comment
        // }
        
        beanBlock += "public void" + " set" + capitalize(meta.getValue("name"))
            + "(" + meta.getValue("type") + " " + meta.getValue("shortName") + ") {" + '\n'
            + "    " + "this." + meta.getValue("name") + " = " + meta.getValue("shortName") + "; "
            + '\n' + "}" + '\n';
        
        // create the following method
        // public Bar getFoo() {
        //      return this.foo;
        // }
        
        beanBlock += "public " + meta.getValue("type") + " get" + capitalize(meta.getValue("name"))
            + "() {" + '\n'
            + "    " + "return this." + meta.getValue("name") + ";"
            + '\n' + "}" + '\n';
        
        // add parameter to constructor
        
        if ( multiParam ) {
            constructor += ", ";
        } else {
            multiParam = true;
        }
        
        // eg. public ArrivalProcess(RandomVariate rv) [
        // tbd: multi param check for constructor CSL of params
        constructor += meta.getValue("type") + " " + meta.getValue("shortName");
        
        // this.setInterarrivalTime(rv);
        
        constructorBlock += '\n' + "this.set" + capitalize(meta.getValue("name")) + "("
            + meta.getValue("shortName") + ");" + '\n';
        
    }
    
    public void end_Parameter() throws SAXException {
        if (DEBUG) System.err.println("end_Parameter()");
    }
    
    public void characters(char[] ch, int start, int length) throws SAXException {
    }
    
    public void endDocument() throws SAXException {
        if ( stdoutPut )
            System.out.println(dotJava);
    }
    
    public void endElement(String name) throws SAXException {
    }
    
    public String getDotJava() {
        return dotJava;
    }
    
    public void ignorableWhitespace(char[] ch, int start, int length) throws SAXException {
    }
    
    public void processingInstruction(String target, String data) throws SAXException {
    }
    
    public void setDocumentLocator(Locator locator) {
    }
    
    public void startDocument() throws SAXException {
    }
    
    public void startElement(String name, AttributeList atts) throws SAXException {
    }
    
    // not generated by NetBeans...?
    
    public void startPrefixMapping( String s, String t ) {
    }
    
    public void endPrefixMapping( String s ) {
    }
    
    public void skippedEntity( String s ) {
    }
    
    public void startElement( String s, String t, String u, Attributes meta ) {
    }
    
    public void endElement( String s, String t, String u, Attributes meta ) {
    }
    
    public void endElement( String s, String t, String u) {
    }
    
}

