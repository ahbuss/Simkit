package simkit.xml;
/*
 * File:           SimkitParser.java
 * Date:           February 27, 2004  5:28 PM
 *
 * @author  Rick Goldberg
 * @version mostly generated by NetBeans XML module
 */
import org.xml.sax.*;

/**
 * The class reads XML documents according to specified DTD and
 * translates all related events into SimkitHandler events.
 * <p>Usage sample:
 * <pre>
 *    SimkitParser parser = new SimkitParser(...);
 *    parser.parse(new InputSource("..."));
 * </pre>
 * <p><b>Warning:</b> the class is machine generated. DO NOT MODIFY</p>
 *
 */
public class SimkitParser implements ContentHandler {
    
    private java.lang.StringBuffer buffer;
    
    private SimkitHandler handler;
    
    private java.util.Stack context;
    
    private EntityResolver resolver;
    
    /**
     * Usage: 
     * e.g. command line:
     * java simkit.xml.SimkitParser simkitLEGO.xml
     *
     * IDE: ( from ONJava.com SAX on NetBeans tutorial )
     * "Invoke the Customizer dialog for the Executor property 
     * by clicking the value and then the ellipsis button. 
     * Click the Expert tab of the Customizer dialog to expose 
     * the Working Directory property. Set Working Directory to 
     * the directory that contains the .xml file, presumably 
     * the same as the source directory in which we've been working."
     *
     */
    
    public static void main( String[] args ) throws Exception {
        SimkitHandler simkitHandler = new SimkitHandlerImpl();
        EntityResolver entityResolver = null;
        SimkitParser simkitParser = new SimkitParser(simkitHandler, entityResolver);
        InputSource input = new InputSource(args[0]);
        simkitParser.parse( input );
    }   
    
    /**
     * Creates a parser instance.
     * @param handler handler interface implementation (never <code>null</code>
     * @param resolver SAX entity resolver implementation or <code>null</code>.
     * It is recommended that it could be able to resolve at least the DTD.
     */
    
    public SimkitParser(final SimkitHandler handler, final EntityResolver resolver) {
        this.handler = handler;
        this.resolver = resolver;
        buffer = new StringBuffer(111);
        context = new java.util.Stack();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void setDocumentLocator(Locator locator) {
        handler.setDocumentLocator(locator);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startDocument() throws SAXException {
        handler.startDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endDocument() throws SAXException {
        handler.endDocument();
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startElement(java.lang.String ns, java.lang.String name, java.lang.String qname, Attributes attrs) throws SAXException {
        dispatch(true);
        context.push(new Object[] {qname, new org.xml.sax.helpers.AttributesImpl(attrs)});
        if ("Cancel".equals(qname)) {
            handler.start_Cancel(attrs);
        } else if ("Schedule".equals(qname)) {
            handler.start_Schedule(attrs);
        } else if ("State".equals(qname)) {
            handler.start_State(attrs);
        } else if ("StateTransition".equals(qname)) {
            handler.handle_StateTransition(attrs);
        } else if ("Event".equals(qname)) {
            handler.start_Event(attrs);
        } else if ("SimkitModule".equals(qname)) {
            handler.start_SimkitModule(attrs);
        } else if ("Parameter".equals(qname)) {
            handler.start_Parameter(attrs);
        }
        handler.startElement(ns, name, qname, attrs);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endElement(java.lang.String ns, java.lang.String name, java.lang.String qname) throws SAXException {
        dispatch(false);
        context.pop();
        if ("Cancel".equals(qname)) {
            handler.end_Cancel();
        } else if ("Schedule".equals(qname)) {
            handler.end_Schedule();
        } else if ("State".equals(qname)) {
            handler.end_State();
        } else if ("Event".equals(qname)) {
            handler.end_Event();
        } else if ("SimkitModule".equals(qname)) {
            handler.end_SimkitModule();
        } else if ("Parameter".equals(qname)) {
            handler.end_Parameter();
        }
        handler.endElement(ns, name, qname);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void characters(char[] chars, int start, int len) throws SAXException {
        buffer.append(chars, start, len);handler.characters(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void ignorableWhitespace(char[] chars, int start, int len) throws SAXException {
        handler.ignorableWhitespace(chars, start, len);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void processingInstruction(java.lang.String target, java.lang.String data) throws SAXException {
        handler.processingInstruction(target, data);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void startPrefixMapping(final java.lang.String prefix, final java.lang.String uri) throws SAXException {
        handler.startPrefixMapping(prefix, uri);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void endPrefixMapping(final java.lang.String prefix) throws SAXException {
        handler.endPrefixMapping(prefix);
    }
    
    /**
     * This SAX interface method is implemented by the parser.
     *
     */
    public final void skippedEntity(java.lang.String name) throws SAXException {
        handler.skippedEntity(name);
    }
    
    private void dispatch(final boolean fireOnlyIfMixed) throws SAXException {
        if (fireOnlyIfMixed && buffer.length() == 0) return; //skip it
        
        Object[] ctx = (Object[]) context.peek();
        String here = (String) ctx[0];
        Attributes attrs = (Attributes) ctx[1];
        if ("Comment".equals(here)) {
            if (fireOnlyIfMixed) throw new IllegalStateException("Unexpected characters() event! (Missing DTD?)");
            handler.handle_Comment(buffer.length() == 0 ? null : buffer.toString(), attrs);
        } else {
            //do not care
        }
        buffer.delete(0, buffer.length());
    }
    
    /**
     * The recognizer entry method taking an InputSource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public void parse(final InputSource input) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(input, this);
    }
    
    /**
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public void parse(final java.net.URL url) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(new InputSource(url.toExternalForm()), this);
    }
    
    /**
     * The recognizer entry method taking an Inputsource.
     * @param input InputSource to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public static void parse(final InputSource input, final SimkitHandler handler) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(input, new SimkitParser(handler, null));
    }
    
    /**
     * The recognizer entry method taking a URL.
     * @param url URL source to be parsed.
     * @throws java.io.IOException on I/O error.
     * @throws SAXException propagated exception thrown by a DocumentHandler.
     * @throws javax.xml.parsers.ParserConfigurationException a parser satisfining requested configuration can not be created.
     * @throws javax.xml.parsers.FactoryConfigurationRrror if the implementation can not be instantiated.
     *
     */
    public static void parse(final java.net.URL url, final SimkitHandler handler) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        parse(new InputSource(url.toExternalForm()), handler);
    }
    
    private static void parse(final InputSource input, final SimkitParser recognizer) throws SAXException, javax.xml.parsers.ParserConfigurationException, java.io.IOException {
        javax.xml.parsers.SAXParserFactory factory = javax.xml.parsers.SAXParserFactory.newInstance();
        factory.setValidating(true);  //the code was generated according DTD
        factory.setNamespaceAware(false);  //the code was generated according DTD
        XMLReader parser = factory.newSAXParser().getXMLReader();
        parser.setContentHandler(recognizer);
        parser.setErrorHandler(recognizer.getDefaultErrorHandler());
        if (recognizer.resolver != null) parser.setEntityResolver(recognizer.resolver);
        parser.parse(input);
    }
    
    /**
     * Creates default error handler used by this parser.
     * @return org.xml.sax.ErrorHandler implementation
     *
     */
    protected ErrorHandler getDefaultErrorHandler() {
        return new ErrorHandler() {
            public void error(SAXParseException ex) throws SAXException  {
                if (context.isEmpty()) System.err.println("Missing DOCTYPE.");
                throw ex;
            }
            
            public void fatalError(SAXParseException ex) throws SAXException {
                throw ex;
            }
            
            public void warning(SAXParseException ex) throws SAXException {
                // ignore
            }
        };
        
    }
    
}

